

@inject BLL.NFE.Interfaces.INFeXmlService nfeXmlService
@inject BLL.NFE.Interfaces.INFeFilesMensagensService mensagensService
@inject NavigationManager navigationManager;

@if (_activate)
{
    <div class="modal fade show" id="myModal" style="display:block" aria-modal="true" role="dialog">
        <div class="modal-dialog modal-xl">
            <div class="modal-content">

                <!-- Modal Header -->
                <div class="modal-header alert alert-danger">
                    <h5 class="modal-title">@Titulo</h5>
                    <button type="button" class="close" @onclick="Fechar">&times;</button>
                </div>

                <!-- Modal body -->
                <div class="modal-body">
                    <table class="table table-hover">
                        <thead class="table-secondary">
                            <tr>
                                <td><b>Id</b></td>
                                <td><b>Inclusão</b></td>
                                <td><b>Texto</b></td>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var erro in _mensagens)
                            {
                                <tr>
                                    <td>@erro.Id</td>
                                    <td>@erro.DataInclusao</td>
                                    <td>@erro.Texto</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>

                <!-- Modal footer -->
                <div class="modal-footer">
                    <button type="button" class="btn btn-dark" @onclick="Fechar">OK</button>
                    <button type="button" class="btn btn-outline-secondary" @onclick="VizualizarNF">Visualizar NF</button>
                    <button type="button" class="btn btn-outline-primary" @onclick="Revalidar">
                        @if (validando)
                        {
                            <span class="@validaClass" role="status" aria-hidden="true"></span>
                            <span>Validando...</span>
                        }
                        else
                        {
                            <span>Revalidar</span>
                        }

                    </button>
                </div>

            </div>
        </div>
    </div>
}
@if (!string.IsNullOrEmpty(exceptionError))
{
<div class="alert alert-danger">
    @exceptionError;
</div>
  
}


@code {
    [Parameter]
    public string Titulo { get; set; }

    [Parameter]
    public IList<NFeFilesMensagens> Mensagens { get; set; }
    private IList<NFeFilesMensagens> _mensagens { get; set; }

    [Parameter]
    public bool Activate { get; set; }
    private bool _activate { get; set; }

    [Parameter]
    public EventCallback<bool> FinishExecutionCallback { get; set; }

    [Parameter]
    public int Id { get; set; }

    [Parameter]
    public string ChaveNfe { get; set; }

    private string _chaveNfe="";


    private bool validando;
    private string validaClass = "";
    private string exceptionError = "";

    protected override void OnParametersSet()
    {
        _chaveNfe = ChaveNfe;
        _activate = Activate;
        _mensagens = Mensagens;

    }


    private void VizualizarNF()
    {

        navigationManager.NavigateTo($"/PainelNFE/{_chaveNfe}");
    }

    private async void Revalidar()
    {
        validando = true;
        validaClass = "spinner-grow spinner-grow-sm";
        try
        {
            await nfeXmlService.Revalidar(_chaveNfe);
        }catch(Exception ex)
        {
            exceptionError = ex.Message;
        }



        _mensagens = await mensagensService.ListarErroDoArquivoAsync(_chaveNfe);
        validando = false;
        validaClass = "";
        this.StateHasChanged();

        //await FinishExecutionCallback.InvokeAsync(true);
    }

    private async Task Fechar()
    {
        _mensagens.Clear();
        _activate = false;
        await FinishExecutionCallback.InvokeAsync(_activate);

    }
}

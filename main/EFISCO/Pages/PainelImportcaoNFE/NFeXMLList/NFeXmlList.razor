@using Radzen.Blazor.Rendering


@inject BLL.NFE.Interfaces.INFeXmlService nfeXmlService
@inject BLL.Infra.Interface.IParametroService parametrosService
@inject BLL.NFE.Interfaces.INFeFilesMensagensService mensagensService
@inject NavigationManager naviagtionManager;

@if (!processando)
{
    <RadzenGrid AllowFiltering="true" AllowPaging="true" PageSize="50"
                AllowSorting="true" Data="@Arquivos" TItem="NFeFiles" RowDoubleClick="@(async (args)=> await AbrirPreviewNF(args.ChaveAcesso))"
                @ref="radzenGrid">
        <Columns>
            <RadzenGridColumn TItem="NFeFiles" Property="AutoValidado" Title="Divergência">
                <Template Context="nfeFile">
                    @if (nfeFile.AutoValidado == false)
                    {
                        <RadzenButton Icon="warning" Click="@(args=> ListarErros(nfeFile))"></RadzenButton>
                    }
                    else
                    {
                        <MatIcon Icon="@MatIconNames.Check_circle" Style="color:green"></MatIcon>
                    }

                </Template>
            </RadzenGridColumn>
            <RadzenGridColumn TItem="NFeFiles" Property="Validado" Title="Auditado">
                <Template>
                    <RadzenCheckBox @bind-Value="@context.Validado" @onclick:preventDefault Disabled="true"></RadzenCheckBox>
                </Template>
            </RadzenGridColumn>
            <RadzenGridColumn TItem="NFeFiles" Property="Processada" Title="Processado">
                <Template>
                    <RadzenCheckBox @bind-Value="@context.Processada" @onclick:preventDefault Disabled="true"></RadzenCheckBox>
                </Template>
            </RadzenGridColumn>
            <RadzenGridColumn TItem="NFeFiles" Property="ChaveAcesso" Title="Chave de Acesso" Width="400px" />
            <RadzenGridColumn TItem="NFeFiles" Property="DataInclusao" Title="Dt Inclusão" Width="200px" />
            <RadzenGridColumn TItem="NFeFiles" Property="DataEmnissaoNfe" Title="Emissao NFe" Width="200px" />
            <RadzenGridColumn TItem="NFeFiles" Property="NumeroNota" Title="N. NFe" Width="200px" />
            <RadzenGridColumn TItem="NFeFiles" Property="Serie" Title="Serie" />
            <RadzenGridColumn TItem="NFeFiles" Property="CnpjFornecedor" Title="CNPJ Fornece" />
            <RadzenGridColumn TItem="NFeFiles" Property="Fornecedor" Title="Fornecedor" Width="300px" />
            <RadzenGridColumn TItem="NFeFiles" Property="ValorTotal" Title="Vlr Total" />

        </Columns>
    </RadzenGrid>
}
else
{
    <RadzenProgressBar Value="100" ShowValue="false" Mode="Radzen.ProgressBarMode.Indeterminate" Style="margin-bottom: 20px" />
}

<AvisoDeErrosNFe Mensagens="@Mensagens"
                 Titulo="@TituloErro"
                 FinishExecutionCallback="ModalInativo" Activate="modalAtivo"
                 ChaveNfe="@chaveNfe">

</AvisoDeErrosNFe>


@code {

    [Parameter]
    public EventCallback<IList<NFeFiles>> ArquivosCarregados { get; set; }

    [Parameter]
    public bool Reload { get; set; }
    private bool _reload;

    [Parameter]
    public bool ListarApenasValidados { get; set; }

    [Parameter]
    public bool ListarApenasAuditados { get; set; }

    [Parameter]
    public bool ListarProcessados { get; set; }

    private bool processando = false;

    private string TituloErro;
    private IList<NFeFiles> Arquivos = new List<NFeFiles>();
    private IList<NFeFilesMensagens> Mensagens { get; set; } = new List<NFeFilesMensagens>();
    private bool modalAtivo = false;
    private string chaveNfe = "";
    private RadzenGrid<NFeFiles> radzenGrid;


    protected override async Task OnInitializedAsync()
    {
        await ListarXML();
        Mensagens = new List<NFeFilesMensagens>();
    }


    protected override async Task OnParametersSetAsync()
    {
        _reload = Reload;

        if (_reload)
        {
            await ListarXML();
            await radzenGrid.Reload();
            this.StateHasChanged();
        }
    }


    private async Task ListarXML()
    {
        Arquivos = await nfeXmlService.ListarXMLSNaoProcessados(ListarApenasValidados, ListarApenasAuditados);
        await ArquivosCarregados.InvokeAsync(Arquivos);
        this.StateHasChanged();
    }

    private async Task ListarErros(NFeFiles _nfeFiles)
    {
        chaveNfe = _nfeFiles.ChaveAcesso;
        TituloErro = $"Divergências da Chave: {_nfeFiles.ChaveAcesso}";

        Mensagens.Clear();
        Mensagens = await mensagensService.ListarErroDoArquivoAsync(_nfeFiles);
        modalAtivo = true;

    }

    private async void ModalInativo(bool finishToLoad)
    {

        modalAtivo = false;
        await ListarXML();
    }

    private async Task AbrirPreviewNF(string chave)
    {
        naviagtionManager.NavigateTo($"/PainelNFE/{chave}");
    }
}

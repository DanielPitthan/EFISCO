@page "/painelImportacaoXML"
@using System.Net.Mime;
@using Microsoft.AspNetCore.Mvc;
@using Models.Graficos


@inject NavigationManager navigationManager;


<NavbarTitulo Titulo="Painel de importação de XML"></NavbarTitulo>
<div class="container-fluid">
    <div class="row" style="padding-bottom:2rem;">
        <div class="col col-md-2 col-lg-2 col-xl-2">
            <MatCard>
                <MatCardContent Style="margin-left:1em;">
                    Notas Pendentes
                    <MatBody1>
                        <h4>@totalNotasPendentes</h4>
                    </MatBody1>
                </MatCardContent>
            </MatCard>
        </div>
    </div>
    <div class="row" style="padding-bottom:2rem;">
        <div class="col col-md-12 col-lg-12 col-xl-12">
            <MatCard>
                <MatCardContent Style="margin-left:1em;">
                    <div class="row">
                        <div class="col-md-6 col-lg-6 col-sm-12">
                            <NfeXmlGraficoProcessado Dados="@pieSeries" PropriedadeLegenda="Serie" PropriedadeValor="Valor" Titulo="Registros"></NfeXmlGraficoProcessado>


                        </div>
                        <div class="col-md-6 col-lg-6 col-sm-12">
                            <NfeXmlGraficoTotais Dados="@barSeries" PropriedadeLegenda="Serie" PropriedadeValor="Valor" Titulo="Total"></NfeXmlGraficoTotais>
                        </div>
                    </div>
                </MatCardContent>
            </MatCard>
        </div>
        </div>
        <div class="row" style="padding-bottom:2rem;">
            <div class="col">
                <NfeDownloadList></NfeDownloadList>
            </div>
        </div>
        <div class="row">
            <NFeXmlList Reload="@reloadList"
                        ArquivosCarregados="@AtualizaListaArquivosCallBack"
                        ListarApenasAuditados="false" ListarApenasValidados="false" 
                        ListarProcessados="@exibeImportados">

            </NFeXmlList>
        </div>
    </div>


@code {
    private bool exibeImportados = false;
    private bool modalValidacaoAberto = false;
    private bool reloadList = false;
    private IList<PieSerie> pieSeries = new List<PieSerie>();
    private IList<BarSerie> barSeries = new List<BarSerie>();
    private int totalNotasPendentes = 0;



    protected override async Task OnInitializedAsync()
    {
        pieSeries.Add(new PieSerie()
        {
            Serie = "Processados",
            Valor = 0
        });

        pieSeries.Add(new PieSerie()
        {
            Serie = "Não Processados",
            Valor = 0
        });
    }

    private void AbrirModalValidacao()
    {
        this.modalValidacaoAberto = true;
    }

    private void CallBackValidacaoFinalizou(bool IsFinished)
    {

        reloadList = IsFinished;
    }

    private void CallBackModalValidacao(bool isOpen)
    {
        if (!isOpen)
            this.modalValidacaoAberto = false;
    }

    private void AtualizaListaArquivosCallBack(IList<NFeFiles> arquivos)
    {

        totalNotasPendentes = arquivos.Count;
        if (reloadList)
            reloadList = false;

        pieSeries.Clear();
        barSeries.Clear();

        int validos = arquivos.Where(x => x.Validado).Count();
        int naoValidos = arquivos.Where(x => !x.Validado).Count();
        decimal validosValor = arquivos.Where(x => x.Validado).Sum(x => x.ValorTotal);
        decimal naoValidosValor = arquivos.Where(x => !x.Validado).Sum(x => x.ValorTotal);


        pieSeries.Add(new PieSerie()
        {
            Serie = "Auditado",
            Valor = validos
        });

        pieSeries.Add(new PieSerie()
        {
            Serie = "Não Auditado",
            Valor = naoValidos == 0 ? 1 : naoValidos
        }); ;


        barSeries.Add(new BarSerie()
        {
            Serie = "Auditado",
            Valor = validosValor
        });

        barSeries.Add(new BarSerie()
        {
            Serie = "Não Auditado",
            Valor = naoValidosValor == 0 ? 1 : naoValidosValor
        });

        this.StateHasChanged();
    }


}

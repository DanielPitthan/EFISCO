

@inject BLL.TOTVS.Cadastros.Interfaces.IProdutoTotvsService produtoTotvsService;
@inject BLL.TOTVS.Cadastros.Interfaces.IProdutoVersusFornecedorTotvsService produtoVsFornecedorService;
@inject BLL.TOTVS.Cadastros.Interfaces.IFornecedorTotvsService fornecedorTotvsService;

<Modal @ref="modalRef">
    <ModalContent Size="ModalSize.Large">
        <ModalHeader>
            <h4>Amarração Produto vs Fornecedor</h4>
        </ModalHeader>
        <ModalBody>
            <table class="table table-striped">
                <thead>
                    <tr>
                        <th colspan="3" class="bg-light">Emitente</th>
                        <th colspan="3" class="bg-info">Protheus</th>
                    </tr>
                    <tr>
                        <th>Referencia.</th>
                        <th>NCM.</th>
                        <th>Produto.</th>
                        <th>Cod. Protheus</th>
                        <th>Descrição</th>
                        <th>Amarração</th>
                    </tr>
                </thead>
                <tbody>
                    @if (Produtos != null)
                    {
                        @foreach (var produto in Produtos)
                        {
                            <tr>
                                <td>  @ProdutoIntegrado.Produto.cProd</td>
                                <td>  @ProdutoIntegrado.Produto.NCM</td>
                                <td>  @ProdutoIntegrado.Produto.xProd</td>
                                <td>   @produto.B1_COD</td>
                                <td>   @produto.B1_DESC</td>
                                <td>
                                    <MatButton Icon="leak_add"
                                               @onclick="@(async ()=> await Amarrar(ProdutoIntegrado,produto))">Amarrar</MatButton>
                                </td>
                            </tr>
                        }
                    }
                </tbody>
            </table>
        </ModalBody>
        <ModalFooter>
            <MatButton @onclick="FecharModal">Fechar</MatButton>
        </ModalFooter>
    </ModalContent>
</Modal>


<MatSnackbar IsOpen="exibeAviso">
    <MatSnackbarContent>
        <p>@aviso</p>
    </MatSnackbarContent>
    <MatSnackbarActions>
        <MatButton Raised="true" @onclick="@(()=>exibeAviso=false)">OK</MatButton>
    </MatSnackbarActions>
</MatSnackbar>

@code {

    [Parameter]
    public bool Show { get; set; }
    private bool _showDialog;


    [Parameter]
    public ProdutoIntegrado ProdutoIntegrado { get; set; }

    [Parameter]
    public IList<ProdutoTotvs> Produtos { get; set; }
    private IList<ProdutoTotvs> _produtos = new List<ProdutoTotvs>();

    [Parameter]
    public EventCallback<bool> AmarracaoFianlizadaCallBack { get; set; }

    private Modal modalRef { get; set; }
    private string aviso = "";
    private bool exibeAviso = false;

    protected override void OnParametersSet()
    {

        if (Produtos == null)
        {
            _produtos = new List<ProdutoTotvs>();
        }
        else
        {
            _produtos = Produtos;
        }
        if (modalRef != null)
        {
            if (Show)
            {
                modalRef.Show();
            }
            else
            {
                modalRef.Hide();
            }
        }

    }


    private void FecharModal()
    {
        modalRef.Show();

    }

    private async Task Amarrar(ProdutoIntegrado produto, ProdutoTotvs produtoTotvs)
    {
        var fornecedor = await this.fornecedorTotvsService.LocateByCnpjAsync(produto.CodigoTotvsEmpresaFilial, produto.CnpjFornecedor);

        if (fornecedor == null)
        {
            aviso = "Fornecedor não cadastrado no Protheus, não é possível fazer a amarração ";
            exibeAviso = true;
            FecharModal();
            return;
        }

        produto.CodigoProdutoTOTVS = produtoTotvs.B1_COD;
        var result = await this.produtoVsFornecedorService.AmarrarFornecedor(produto);

        await this.AmarracaoFianlizadaCallBack.InvokeAsync(result);

    }
}
